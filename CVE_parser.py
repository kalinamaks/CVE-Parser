# Python скрипт который ищет новые уязвимости за определенный день
import requests
import re
from bs4 import BeautifulSoup
import lxml
from datetime import datetime

USERNAME = ''
PASSWORD = ''
URL3 = ''
now = datetime.now()

def parsing_opencve():
    url1 = ''
    url2 = ''
    csrf_token = ''
    count = 0
    s = requests.Session()
    response = s.get(url1)
    soup = BeautifulSoup(response.text, 'lxml')
    date_time = now.strftime('%Y-%m-%d')

    # Храним сессионный ключ
    for a in soup.find_all('meta'):
        if 'name' in a.attrs:
            if a.attrs['name'] == 'csrf-token':
                csrf_token = a.attrs['content']

    # Аутентификация
    s.post(
        url2,
        data={
            'username': USERNAME,
            'password': PASSWORD,
            'csrf_token': csrf_token,
        },
        headers={'referer': ''},
        verify=False
    )

    # Массивы с CVE
    cve_num = []
    cve_vendors = []
    cve_date = []
    cve_discr = []
    result = []

    # Получаем страницу, ищем в таблице нужное
    for page_num in range(1, 10):
        pagination = f'https://www.opencve.io/cve?page={page_num}'# проход по страницам
        resp = s.get(pagination)
        parse = BeautifulSoup(resp.text, 'lxml')
        cve_table = parse.find_all('tr', class_='cve-header')
        cve_table2 = parse.find_all('tr', class_='cve-summary')
        for cve in cve_table:# ищем номер, производителя, дату
            cve_num.append(cve.find('td').find('a').get_text())
            cve_vendors.append(cve.find_all('td')[1].get_text())
            cve_date.append(cve.find('td', class_='text-center').text)

        for cve in cve_table2:# ищем описание
            cve_discr.append(cve.find('td', class_='col-md-12 no-bordered').text)
    for cve_date, cve_num, cve_vendor, cve_discr in zip(cve_date, cve_num, cve_vendors, cve_discr):
        line = '\n'.join([cve_date, cve_num, cve_vendor, cve_discr])
        if line.find(date_time) != -1:
            result.append(line)
            count += 1
        else:
            break

    # Формирование вывода
    for line in result:
        print(line + '\n')

# Проверка доступности и запуск
respon = requests.get(URL3)
if respon.status_code == '200' or '302':
    done = parsing_opencve()
    print(done)
else:
    print('Site unavailable')